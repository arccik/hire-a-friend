// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    // provider = "sqlite"
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String  @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    coverImage    String?
    accounts      Account[]
    sessions      Session[]
    password      String?

    firstName String?
    lastName  String?
    age       Int?
    about     String?
    photos    String[]

    country String?
    street  String?
    city    String?
    state   String?
    zipCode String?

    phoneNumber String?
    gender      String?
    birthday    DateTime?
    activities  String[]
    hobbies     String[]

    experties String?
    price     Float?
    hidePrice Boolean?
    languages String[]
    activated Boolean?
    earnings  String?
    feedback  String[]

    lastLogin DateTime?

    isOffering Boolean?
    userType   UserType?

    followers Follower[]

    status       String?
    appearance   Appearance? @relation(fields: [appearanceId], references: [id])
    appearanceId String?
    views        Int         @default(0)
    Comment      Comment[]
    Rate         Rate[]

    availableHours String?
    contactId      String?
    contacts       Contact[]
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
}

model Rate {
    id           String @id @default(cuid())
    voterId      String
    targetUserId String
    user         User   @relation(fields: [targetUserId], references: [id])
    rating       Int    @default(1)
}

model Follower {
    id     String @id @default(cuid())
    userId String
    user   User   @relation(fields: [userId], references: [id])
}

model Appearance {
    id        String  @id @default(uuid())
    height    String?
    weight    String?
    hairColor String?
    eyeColor  String?
    bodyType  String?
    ethnicity String?
    User      User[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Comment {
    id        Int      @id @default(autoincrement())
    text      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    user      User     @relation(fields: [userId], references: [id])
    userId    String
}

enum UserType {
    Friend
    Customer
}

model Contact {
    id        String  @id @default(uuid())
    userId    String
    href      String
    name      String?
    image     String?
    User      User    @relation(fields: [userId], references: [id])
    contactId String
}
